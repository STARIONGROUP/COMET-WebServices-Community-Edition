// --------------------------------------------------------------------------------------------------------------------
// <copyright file="JsonExchangeFileWriter.cs" company="Starion Group S.A.">
//    Copyright (c) 2015-2024 Starion Group S.A.
//
//    Author: Sam Gerené, Alex Vorobiev, Alexander van Delft, Nathanael Smiechowski, Antoine Théate
//
//    This file is part of CDP4-COMET Webservices Community Edition. 
//    The CDP4-COMET Webservices Community Edition is the STARION implementation of ECSS-E-TM-10-25 Annex A and Annex C.
//
//    The CDP4-COMET Webservices Community Edition is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Affero General Public
//    License as published by the Free Software Foundation; either
//    version 3 of the License, or (at your option) any later version.
//
//    The CDP4-COMET Webservices Community Edition is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

namespace CometServer.Services
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.IO;
    using System.Linq;

    using CDP4Common.Comparers;
    using CDP4Common.DTO;
    using CDP4Common.Exceptions;

    using CometServer.Authorization;
    using CometServer.Services.Authorization;
    using CometServer.Services.Protocol;

    using ICSharpCode.SharpZipLib.Zip;

    using Npgsql;
    
    using Thing = CDP4Common.DTO.Thing;

    /// <summary>
    /// The purpose of the <see cref="JsonExchangeFileWriter"/> class is to write data to
    /// an E-TM-10-25 Annex C3 archive
    /// </summary>
    public class JsonExchangeFileWriter : IJsonExchangeFileWriter
    {
        /// <summary>
        /// Gets or sets the (injected) <see cref="ICredentialsService"/>
        /// </summary>
        public ICredentialsService CredentialsService { get; set; }

        /// <summary>
        /// Gets or sets the (injected) <see cref="IObfuscationService"/>
        /// </summary>
        public IObfuscationService ObfuscationService { get; set; }

        /// <summary>
        /// Gets or sets the (injected) <see cref="IRequestUtils"/>
        /// </summary>
        public IRequestUtils RequestUtils { get; set; }

        /// <summary>
        /// Gets or sets the (injected) <see cref="SiteDirectoryService"/> used to read <see cref="SiteDirectory"/> data
        /// </summary>
        public ISiteDirectoryService SiteDirectoryService { get; set; }

        /// <summary>
        /// Gets or sets the (injected) <see cref="IEngineeringModelService"/> used to read <see cref="EngineeringModel"/> data
        /// </summary>
        public IEngineeringModelService EngineeringModelService { get; set; }

        /// <summary>
        /// Gets or sets the (injected) <see cref="IIterationService"/> used to read <see cref="Iteration"/> data
        /// </summary>
        public IIterationService IterationService { get; set; }

        /// <summary>
        /// Gets or sets the (injected) <see cref="ISiteReferenceDataLibraryService"/> used to read <see cref="SiteReferenceDataLibrary"/> data
        /// </summary>
        public ISiteReferenceDataLibraryService SiteReferenceDataLibraryService { get; set; }

        /// <summary>
        /// Gets or sets the (injected) <see cref="IModelReferenceDataLibraryService"/> used to read <see cref="ModelReferenceDataLibrary"/> data
        /// </summary>
        public IModelReferenceDataLibraryService ModelReferenceDataLibraryService { get; set; }

        /// <summary>
        /// Gets or sets the (injected) <see cref="IZipArchiveWriter"/> used to write the JSON data to an E-TM-10-25 Annex C3 zip archive
        /// </summary>
        public IZipArchiveWriter ZipArchiveWriter { get; set; }

        /// <summary>
        /// A remark to be included in the exchange header file.
        /// </summary>
        private const string ExchangeHeaderRemark = "This is an ECSS-E-TM-10-25 exchange file generated by the COMET server";

        /// <summary>
        /// The copyright text to be included in the exchange header file.
        /// </summary>
        private const string ExchangeHeaderCopyright = "Copyright 2015-2021 © Starion Group S.A.";

        /// <summary>
        /// Creates an E-TM-10-25 Annex-C3 zip archive and stores this on disk. The path to this file is returned
        /// </summary>
        /// <param name="transaction">
        /// The <see cref="NpgsqlTransaction"/> used to read 10-25 data from the database
        /// </param>
        /// <param name="exportDirectory">
        /// the path to the export directory where the temporary zip file will be created
        /// </param>
        /// <param name="engineeringModelSetups">
        /// An <see cref="IEnumerable{EngineeringModelSetup}"/> that is to be included in the E-TM-10-25 Annex-C3 zip archive
        /// </param>
        /// <param name="version">
        /// The <see cref="Version"/> of the COMET data model that is requested
        /// </param>
        /// <returns>
        /// The path to the temporary E-TM-10-25 Annex-C3 zip archive
        /// </returns>
        public string Create(NpgsqlTransaction transaction, string exportDirectory, IEnumerable<EngineeringModelSetup> engineeringModelSetups, Version version)
        {
            if (!Directory.Exists(exportDirectory))
            {
                Directory.CreateDirectory(exportDirectory);
            }

            var path = Path.Combine(exportDirectory, $"E-TM-10-25-Annex-C3-{DateTime.UtcNow:yyyyMMddThhmmssfff}.zip");

            var siteDirectoryCache = this.PopulateSiteDirectoryDataCache(transaction);
            this.PruneSiteDirectoryCache(engineeringModelSetups, ref siteDirectoryCache);
            
            using var fileStream = System.IO.File.Create(path);
            using var zipOutputStream = new ZipOutputStream(fileStream);
            zipOutputStream.SetLevel(2);
            
            var exchangeFileHeader = this.CreateExchangeFileHeader(siteDirectoryCache);
            this.ZipArchiveWriter.WriteHeaderToZipFile(exchangeFileHeader, zipOutputStream);

            var siteDirectoryThings = siteDirectoryCache.Values.ToList();
            this.ZipArchiveWriter.WriteSiteDirectoryToZipFile(siteDirectoryThings, zipOutputStream);

            var modelRdls = siteDirectoryCache.Values.OfType<ModelReferenceDataLibrary>();
            foreach (var modelReferenceDataLibrary in modelRdls)
            {
                this.RequestUtils.OverrideQueryParameters = new QueryParameters { IncludeReferenceData = true };
                var modelReferenceData = this.ModelReferenceDataLibraryService.GetDeep(transaction, "SiteDirectory", new List<Guid> { modelReferenceDataLibrary.Iid }, new RequestSecurityContext { ContainerReadAllowed = true }).ToList();
                this.RequestUtils.OverrideQueryParameters = null;

                var modelRdl = modelReferenceData.OfType<ModelReferenceDataLibrary>().Single();

                modelReferenceData.Remove(modelRdl);

                this.ZipArchiveWriter.WriteModelReferenceDataLibraryToZipFile(modelRdl, modelReferenceData, zipOutputStream);
            }

            var siteRdls = siteDirectoryCache.Values.OfType<SiteReferenceDataLibrary>();
            foreach (var siteReferenceDataLibrary in siteRdls)
            {
                this.RequestUtils.OverrideQueryParameters = new QueryParameters { IncludeReferenceData = true };
                var siteReferenceData = this.SiteReferenceDataLibraryService.GetDeep(transaction, "SiteDirectory", new List<Guid> { siteReferenceDataLibrary.Iid }, new RequestSecurityContext { ContainerReadAllowed = true }).ToList();
                this.RequestUtils.OverrideQueryParameters = null;

                var siteRdl = siteReferenceData.OfType<SiteReferenceDataLibrary>().Single();

                siteReferenceData.Remove(siteRdl);

                this.ZipArchiveWriter.WriteSiteReferenceDataLibraryToZipFile(siteRdl, siteReferenceData, zipOutputStream);
            }
            
            foreach (var engineeringModelSetup in engineeringModelSetups)
            {
                var fileRevisionsHashSet = new HashSet<FileRevision>();

                this.CredentialsService.Credentials.EngineeringModelSetup = engineeringModelSetup;
                this.CredentialsService.ResolveParticipantCredentials(transaction);

                var engineeringModelPartition = this.RequestUtils.GetEngineeringModelPartitionString(engineeringModelSetup.EngineeringModelIid);
                var engineeringModelThings = this.EngineeringModelService.GetDeep(transaction, engineeringModelPartition, new List<Guid> { engineeringModelSetup.EngineeringModelIid }, new RequestSecurityContext { ContainerReadAllowed = true }).ToList();

                if (engineeringModelSetup.OrganizationalParticipant.Count != 0)
                {
                    this.ObfuscationService.ObfuscateResponse(engineeringModelThings, this.CredentialsService.Credentials);
                }

                var engineeringModelFileRevisions = engineeringModelThings.OfType<FileRevision>().ToList();
                foreach (var fileRevision in engineeringModelFileRevisions)
                {
                    fileRevisionsHashSet.Add(fileRevision);
                }

                this.ZipArchiveWriter.WriteEngineeringModelToZipFile(engineeringModelSetup, engineeringModelThings, zipOutputStream);

                foreach (var iterationSetupIid in engineeringModelSetup.IterationSetup)
                {
                     var iterationSetup = siteDirectoryCache.Values.OfType<IterationSetup>().SingleOrDefault(x => x.Iid == iterationSetupIid);

                     var iterationThings = this.IterationService.GetDeep(transaction, engineeringModelPartition, new List<Guid> { iterationSetup.IterationIid }, new RequestSecurityContext { ContainerReadAllowed = true }).ToList();

                     if (engineeringModelSetup.OrganizationalParticipant.Count != 0)
                     {
                         this.ObfuscationService.ObfuscateResponse(iterationThings, this.CredentialsService.Credentials);
                     }

                     var iterationFileRevisions = iterationThings.OfType<FileRevision>().ToList();
                     foreach (var fileRevision in iterationFileRevisions)
                     {
                         fileRevisionsHashSet.Add(fileRevision);
                     }
                     
                     this.ZipArchiveWriter.WriteIterationToZipFile(engineeringModelSetup, iterationSetup, iterationThings, zipOutputStream);
                }

                if (this.RequestUtils.QueryParameters.IncludeFileData)
                {
                    this.ZipArchiveWriter.WriteFileRevisionsToZipFile(engineeringModelSetup, fileRevisionsHashSet, zipOutputStream);
                }
            }

            zipOutputStream.IsStreamOwner = false;
            zipOutputStream.Finish();
            zipOutputStream.Close();

            return path;
        }

        /// <summary>
        /// Factory method that creates a <see cref="ExchangeFileHeader"/> based on the provided <see cref="siteDirectoryCache"/>
        /// </summary>
        /// <param name="siteDirectoryCache">
        /// The dictionary that is used to create the <see cref="ExchangeFileHeader"/>
        /// </param>
        /// <returns>
        /// An instance of <see cref="ExchangeFileHeader"/>
        /// </returns>
        private ExchangeFileHeader CreateExchangeFileHeader(Dictionary<Guid, Thing> siteDirectoryCache)
        {
            var person = siteDirectoryCache.Values.OfType<Person>().SingleOrDefault(x => x.ShortName == this.CredentialsService.Credentials.Person.UserName);

            if (person == null)
            {
                throw new ThingNotFoundException($"The Person object represented by {this.CredentialsService.Credentials.Person.UserName} could not be found");
            }

            EmailAddress email = null;

            if (person.DefaultEmailAddress != null)
            {
                email = siteDirectoryCache.Values.OfType<EmailAddress>().SingleOrDefault(x => x.Iid == person.DefaultEmailAddress.Value);
            }

            var exchangeFileInitiator =
                new ExchangeFileInitiator
                {
                    Iid = person.Iid,
                    GivenName = person.GivenName,
                    Surname = person.Surname,
                    Email = email != null ? email.Value : string.Empty
                };

            Organization organizationDto = null;

            if (person.Organization != null)
            {
                organizationDto = siteDirectoryCache.Values.OfType<Organization>().SingleOrDefault(x => x.Iid == person.Organization.Value);
            }

            var organization = organizationDto != null
                                   ? new OrganizationInfo
                                   {
                                       Iid = organizationDto.Iid,
                                       Name = organizationDto.Name,
                                       Site = null,
                                       Unit = !string.IsNullOrEmpty(person.OrganizationalUnit)
                                                        ? person.OrganizationalUnit
                                                        : null
                                   }
                                   : null;

            var exchangeFileHeader = new ExchangeFileHeader
                {
                    DataModelVersion = "2.4.1",
                    Remark = ExchangeHeaderRemark,
                    Copyright = ExchangeHeaderCopyright,
                    Extensions = null,
                    CreatorPerson = exchangeFileInitiator,
                    CreatorOrganization = organization
                };

            return exchangeFileHeader;
        }

        /// <summary>
        /// Populates a dictionary with the contents of the SiteDirectory, with the exception of the <see cref="SiteReferenceDataLibrary"/>s
        /// nor the <see cref="ModelReferenceDataLibrary"/> instances
        /// </summary>
        /// <param name="transaction">
        /// The current (open) <see cref="NpgsqlTransaction"/> used to connect to the database
        /// </param>
        private Dictionary<Guid, Thing> PopulateSiteDirectoryDataCache(NpgsqlTransaction transaction)
        {
            var dictionary = new Dictionary<Guid, Thing>();
            
            var siteDirectoryData = this.SiteDirectoryService.GetDeep(transaction, "SiteDirectory", null, new RequestSecurityContext { ContainerReadAllowed = true });

            foreach (var thing in siteDirectoryData)
            {
                thing.ExcludedDomain.Clear();
                thing.ExcludedPerson.Clear();

                dictionary.Add(thing.Iid, thing);
            }

            return dictionary;
        }

        /// <summary>
        /// Prunes the <paramref name="siteDirectoryCache"/> data based on the <see cref="EngineeringModelSetup"/>s that are to become part of the E-TM-10-25 Annex C3 archive
        /// </summary>
        /// <param name="engineeringModelSetups">
        /// The <see cref="EngineeringModelSetup"/>s that are to be included
        /// </param>
        /// <param name="siteDirectoryCache">
        /// the <see cref="SiteDirectory"/> cache
        /// </param>
        /// <remarks>
        /// Participants that are not inlcuded in any of the EngineeringModelSetups are removed with the exception of the Person that is performing the request
        /// ParticipantRoles that are not referenced by any of the Participants are removed
        /// Persons that are not Participants in any of EngineeringModelSetups are removed
        /// PersonRoles that are not referenced by any of the Persons are removed
        /// Domains that are not Default Domains of any included Persons or that are not active domains of any of the EngineeringModelSetup are removed
        /// SiteReferenceDataLibraries that are not in any of the chain of RDLs of the EngineeringModelSetups are removed
        /// EngineeringModelReferenceDataLibraries that are not referenced by any of the EngineeringModelSetups are removed
        /// EngineeringModelSetups that are not in the to-be included EngineeringModelSetup are removed
        /// </remarks>
        private void PruneSiteDirectoryCache(IEnumerable<EngineeringModelSetup> engineeringModelSetups, ref Dictionary<Guid, Thing> siteDirectoryCache)
        {
            PruneEngineeringModelSetupsFromSiteDirectoryCache(engineeringModelSetups, ref siteDirectoryCache);
            PruneSiteReferenceDataLibrariesFromSiteDirectoryCache(engineeringModelSetups, ref siteDirectoryCache);
            PrunePersonsFromSiteDiretoryCache(ref siteDirectoryCache);
            PrunePersonRolesFromSiteDirectoryCache(ref siteDirectoryCache);
            PruneParticipantRolesFromSiteDirectoryCache(ref siteDirectoryCache);
            PruneDomainOfExpertiseFromSiteDirectoryCache(engineeringModelSetups, ref siteDirectoryCache);
        }

        private static void PruneEngineeringModelSetupsFromSiteDirectoryCache(IEnumerable<EngineeringModelSetup> engineeringModelSetups, ref Dictionary<Guid, Thing> siteDirectoryCache)
        {
            var siteDirectory = siteDirectoryCache.Values.OfType<SiteDirectory>().Single();

            var engineeringModelSetupsToBeRemoved = siteDirectoryCache.Values.OfType<EngineeringModelSetup>().Except(engineeringModelSetups, new DtoThingIidComparer());

            foreach (var engineeringModelSetup in engineeringModelSetupsToBeRemoved)
            {
                PruneThingAndContainedThingsFromThingCache(ref siteDirectoryCache, engineeringModelSetup);
            }

            foreach (var engineeringModelSetup in engineeringModelSetupsToBeRemoved)
            {
                siteDirectory.Model.Remove(engineeringModelSetup.Iid);
            }
        }

        private static void PrunePersonsFromSiteDiretoryCache(ref Dictionary<Guid, Thing> siteDirectoryCache)
        {
            var siteDirectory = siteDirectoryCache.Values.OfType<SiteDirectory>().Single();

            var particpants = siteDirectoryCache.Values.OfType<Participant>();
            
            var persons = siteDirectoryCache.Values.OfType<Person>();

            foreach (var person in persons)
            {
                var keepPerson = false;

                foreach (var participant in particpants)
                {
                    if (participant.Person == person.Iid)
                    {
                        keepPerson = true;
                        break;
                    }
                }

                if (!keepPerson)
                {
                    PruneThingAndContainedThingsFromThingCache(ref siteDirectoryCache, person);
                    siteDirectory.Person.Remove(person.Iid);
                }
            }
        }

        private static void PrunePersonRolesFromSiteDirectoryCache(ref Dictionary<Guid, Thing> siteDirectoryCache)
        {
            var siteDirectory = siteDirectoryCache.Values.OfType<SiteDirectory>().Single();

            var persons = siteDirectoryCache.Values.OfType<Person>();

            var personRoles = siteDirectoryCache.Values.OfType<PersonRole>();

            foreach (var personRole in personRoles)
            {
                var keepPersonRole = false;

                foreach (var person in persons)
                {
                    if (person.Role.HasValue && person.Role.Value == personRole.Iid)
                    {
                        keepPersonRole = true;
                        break;
                    }
                }

                if (!keepPersonRole)
                {
                    PruneThingAndContainedThingsFromThingCache(ref siteDirectoryCache, personRole);
                    siteDirectory.PersonRole.Remove(personRole.Iid);
                }
            }
        }

        private static void PruneParticipantRolesFromSiteDirectoryCache(ref Dictionary<Guid, Thing> siteDirectoryCache)
        {
            var siteDirectory = siteDirectoryCache.Values.OfType<SiteDirectory>().Single();

            var particpants = siteDirectoryCache.Values.OfType<Participant>();

            var particpantRoles = siteDirectoryCache.Values.OfType<ParticipantRole>();

            foreach (var participantRole in particpantRoles)
            {
                var keepParticipantRole = false;

                foreach (var participant in particpants)
                {
                    if (participant.Role == participantRole.Iid)
                    {
                        keepParticipantRole = true;
                        break;
                    }
                }

                if (!keepParticipantRole)
                {
                    PruneThingAndContainedThingsFromThingCache(ref siteDirectoryCache, participantRole);
                    siteDirectory.ParticipantRole.Remove(participantRole.Iid);
                }
            }
        }

        private static void PruneDomainOfExpertiseFromSiteDirectoryCache(IEnumerable<EngineeringModelSetup> engineeringModelSetups, ref Dictionary<Guid, Thing> siteDirectoryCache)
        {
            var siteDirectory = siteDirectoryCache.Values.OfType<SiteDirectory>().Single();

            var domains = siteDirectoryCache.Values.OfType<DomainOfExpertise>();

            var persons = siteDirectoryCache.Values.OfType<Person>();

            foreach (var domainOfExpertise in domains)
            {
                var keepDomainOfExpertise = false;

                // check whether the DomainOfExpertise is an active domain in any of the EngineeringModelSetup objects
                foreach (var engineeringModelSetup in engineeringModelSetups)
                {
                    if (engineeringModelSetup.ActiveDomain.Contains(domainOfExpertise.Iid))
                    {
                        keepDomainOfExpertise = true;
                        break;
                    }
                }

                if (!keepDomainOfExpertise)
                {
                    // check whether the DomainOfExpertise is the default domain of any of the Person objects
                    foreach (var person in persons)
                    {
                        if (person.DefaultDomain.HasValue && person.DefaultDomain.Value == domainOfExpertise.Iid)
                        {
                            keepDomainOfExpertise = true;
                            break;
                        }
                    }
                }

                if (!keepDomainOfExpertise)
                {
                    PruneThingAndContainedThingsFromThingCache(ref siteDirectoryCache, domainOfExpertise);
                    siteDirectory.Domain.Remove(domainOfExpertise.Iid);
                }
            }
        }

        private static void PruneSiteReferenceDataLibrariesFromSiteDirectoryCache(IEnumerable<EngineeringModelSetup> engineeringModelSetups, ref Dictionary<Guid, Thing> siteDirectoryCache)
        {
            var referenceDataLibraries = new HashSet<ReferenceDataLibrary>();

            foreach (var engineeringModelSetup in engineeringModelSetups)
            {
                var chainOfRdls = QueryChainOfRdl(engineeringModelSetup, siteDirectoryCache);

                foreach (var referenceDataLibrary in chainOfRdls)
                {
                    referenceDataLibraries.Add(referenceDataLibrary);
                }
            }

            var rdlsToBePruned = siteDirectoryCache.Values.OfType<ReferenceDataLibrary>().Except(referenceDataLibraries, new DtoThingIidComparer());

            foreach (var thing in rdlsToBePruned)
            {
                siteDirectoryCache.Remove(thing.Iid);
            }
        }

        private static ReadOnlyCollection<ReferenceDataLibrary> QueryChainOfRdl(EngineeringModelSetup engineeringModelSetup, Dictionary<Guid, Thing> siteDirectoryCache)
        {
            var result = new List<ReferenceDataLibrary>();

            var modelReferenceDataLibraryIid = engineeringModelSetup.RequiredRdl.Single();

            if (siteDirectoryCache.TryGetValue(modelReferenceDataLibraryIid, out var modelReferenceDataLibrary))
            {
                var modelrdl = (ReferenceDataLibrary) modelReferenceDataLibrary;
                result.Add(modelrdl);

                var rdls = QueryRequiredRdl(modelrdl, siteDirectoryCache);

                foreach (var rdl in rdls)
                {
                    result.Add(rdl);
                }
            }

            return result.AsReadOnly();
        }

        private static IEnumerable<ReferenceDataLibrary> QueryRequiredRdl(ReferenceDataLibrary referenceDataLibrary, Dictionary<Guid, Thing> siteDirectoryCache)
        {
            if (referenceDataLibrary.RequiredRdl.HasValue)
            {
                if (siteDirectoryCache.TryGetValue(referenceDataLibrary.RequiredRdl.Value, out var requiredRdl))
                {
                    var rdl = (ReferenceDataLibrary) requiredRdl;
                    yield return rdl;

                    var requiredRdls = QueryRequiredRdl(rdl, siteDirectoryCache);

                    foreach (var dataLibrary in requiredRdls)
                    {
                        yield return dataLibrary;
                    }
                }
            }
        }

        private static void PruneThingAndContainedThingsFromThingCache(ref Dictionary<Guid, Thing> dictionary, Thing thing)
        {
            foreach (var thingContainerList in thing.ContainerLists)
            {
                foreach (var containedThingIdentifier in (IEnumerable<Guid>)thingContainerList)
                {
                    if (dictionary.TryGetValue(containedThingIdentifier, out var containedThing))
                    {
                        PruneThingAndContainedThingsFromThingCache(ref dictionary, containedThing);
                    }
                } 
            }

            dictionary.Remove(thing.Iid);
        }
    }
}
