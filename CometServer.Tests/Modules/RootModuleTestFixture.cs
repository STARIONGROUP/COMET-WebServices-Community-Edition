// --------------------------------------------------------------------------------------------------------------------
// <copyright file="RootModuleTestFixture.cs" company="Starion Group S.A.">
//    Copyright (c) 2015-2025 Starion Group S.A.
//
//    Author: Generated by OpenAI's assistant
//
//    This file is part of CDP4-COMET Webservices Community Edition.
//    The CDP4-COMET Webservices Community Edition is the STARION implementation of ECSS-E-TM-10-25 Annex A and Annex C.
//
//    The CDP4-COMET Webservices Community Edition is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Affero General Public
//    License as published by the Free Software Foundation; either
//    version 3 of the License, or (at your option) any later version.
//
//    The CDP4-COMET Webservices Community Edition is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

namespace CometServer.Tests.Modules
{
    using System;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Threading.Tasks;

    using CometServer.Authentication.Anonymous;
    using CometServer.Modules;
    using CometServer.Resources;

    using Microsoft.AspNetCore.Authorization;
    using Microsoft.AspNetCore.Builder;
    using Microsoft.AspNetCore.Http;
    using Microsoft.AspNetCore.Routing;
    using Microsoft.Extensions.DependencyInjection;

    using Moq;

    using NUnit.Framework;

    /// <summary>
    /// Tests for <see cref="RootModule"/>.
    /// </summary>
    [TestFixture]
    public class RootModuleTestFixture
    {
        [Test]
        public async Task RootEndpointRendersTemplateWithInjectedValues()
        {
            var resourceLoader = new Mock<IResourceLoader>();
            resourceLoader.Setup(r => r.QueryModelVersions()).Returns(new[] { new Version(1, 0), new Version(2, 1) });
            resourceLoader.Setup(r => r.QueryRootPage()).Returns("<html>{{basePath}}|{{sdkVersion}}|{{apiVersion}}|{{modelVersions}}</html>");
            resourceLoader.Setup(r => r.QuerySDKVersion()).Returns("sdk-version");
            resourceLoader.Setup(r => r.QueryVersion()).Returns("api-version");

            var builder = WebApplication.CreateBuilder();
            builder.Services.AddAuthorization();
            builder.Services.AddSingleton(resourceLoader.Object);

            await using var app = builder.Build();
            new RootModule().AddRoutes(app);

            var endpoint = app.DataSources.SelectMany(ds => ds.Endpoints).OfType<RouteEndpoint>()
                .Single(e => e.RoutePattern.RawText == "/");

            var context = new DefaultHttpContext
            {
                RequestServices = app.Services
            };

            context.Request.Path = "/";
            context.Request.PathBase = "/base";
            context.Response.Body = new MemoryStream();

            await endpoint.RequestDelegate!(context);

            context.Response.Body.Seek(0, SeekOrigin.Begin);
            using var reader = new StreamReader(context.Response.Body);
            var body = await reader.ReadToEndAsync();

            Assert.That(context.Response.StatusCode, Is.EqualTo((int)HttpStatusCode.OK));
            Assert.That(context.Response.ContentType, Is.EqualTo("text/html"));
            Assert.That(body, Is.EqualTo("<html>/base|sdk-version|api-version|1.0, 2.1</html>"));

            resourceLoader.Verify(r => r.QueryRootPage(), Times.Once);
            resourceLoader.Verify(r => r.QueryModelVersions(), Times.Once);
            resourceLoader.Verify(r => r.QuerySDKVersion(), Times.Once);
            resourceLoader.Verify(r => r.QueryVersion(), Times.Once);
        }

        [Test]
        public async Task RootEndpointRequiresAnonymousAuthentication()
        {
            var builder = WebApplication.CreateBuilder();
            builder.Services.AddAuthorization();
            builder.Services.AddSingleton(Mock.Of<IResourceLoader>());

            await using var app = builder.Build();
            new RootModule().AddRoutes(app);

            var endpoint = app.DataSources.SelectMany(ds => ds.Endpoints).OfType<RouteEndpoint>()
                .Single(e => e.RoutePattern.RawText == "/");

            var authorizeData = endpoint.Metadata.GetOrderedMetadata<IAuthorizeData>();

            Assert.That(authorizeData, Has.Count.EqualTo(1));
            Assert.That(authorizeData[0].AuthenticationSchemes, Is.EqualTo(AnonymousAuthenticationDefaults.AuthenticationScheme));
        }
    }
}
