// --------------------------------------------------------------------------------------------------------------------
// <copyright file="HealthModuleTestFixture.cs" company="Starion Group S.A.">
//    Copyright (c) 2015-2025 Starion Group S.A.
//
//    Author: Generated by OpenAI's assistant
//
//    This file is part of CDP4-COMET Webservices Community Edition.
//    The CDP4-COMET Webservices Community Edition is the STARION implementation of ECSS-E-TM-10-25 Annex A and Annex C.
//
//    The CDP4-COMET Webservices Community Edition is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Affero General Public
//    License as published by the Free Software Foundation; either
//    version 3 of the License, or (at your option) any later version.
//
//    The CDP4-COMET Webservices Community Edition is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

namespace CometServer.Tests.Modules
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Reflection;
    using System.Runtime.Serialization;
    using System.Threading.Tasks;

    using CDP4Common.DTO;
    using CDP4Orm.Dao;

    using CometServer.Authentication.Anonymous;
    using CometServer.Configuration;
    using CometServer.Health;
    using CometServer.Helpers;
    using CometServer.Modules.Health;
    using CometServer.Services;

    using Microsoft.AspNetCore.Authorization;
    using Microsoft.AspNetCore.Builder;
    using Microsoft.AspNetCore.Http;
    using Microsoft.AspNetCore.Routing;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Extensions.Logging;

    using Moq;

    using Npgsql;

    using NUnit.Framework;

    /// <summary>
    /// Tests for <see cref="HealthModule"/>.
    /// </summary>
    [TestFixture]
    public class HealthModuleTestFixture
    {
        [Test]
        public async Task AddRoutesRegistersHealthEndpointsWithExpectedMetadata()
        {
            var appConfig = new AppConfig
            {
                HealthConfig = new HealthConfig
                {
                    RequireHost = new[] { "health.example" }
                }
            };

            var logger = new Mock<ILogger<HealthModule>>();
            var appConfigService = new Mock<IAppConfigService>();
            appConfigService.SetupGet(s => s.AppConfig).Returns(appConfig);

            var tokenGeneratorService = new Mock<ITokenGeneratorService>();
            var cometHasStartedService = new Mock<ICometHasStartedService>();

            var builder = WebApplication.CreateBuilder();
            builder.Services.AddAuthorization();

            await using var app = builder.Build();
            var module = new HealthModule(logger.Object, appConfigService.Object, tokenGeneratorService.Object, cometHasStartedService.Object);
            module.AddRoutes(app);

            var endpoints = app.DataSources.SelectMany(ds => ds.Endpoints).OfType<RouteEndpoint>().ToList();
            Assert.That(endpoints, Has.Count.EqualTo(3));

            foreach (var endpoint in endpoints)
            {
                var authorizeData = endpoint.Metadata.GetOrderedMetadata<IAuthorizeData>();
                Assert.That(authorizeData, Has.Count.EqualTo(1));
                Assert.That(authorizeData[0].AuthenticationSchemes, Is.EqualTo(AnonymousAuthenticationDefaults.AuthenticationScheme));

                var hostMetadata = endpoint.Metadata.GetMetadata<IHostMetadata>();
                Assert.That(hostMetadata, Is.Not.Null);
                Assert.That(hostMetadata.Hosts, Is.EquivalentTo(appConfig.HealthConfig.RequireHost));
            }

            Assert.That(endpoints.Any(e => e.RoutePattern.RawText == "/health/startup"), Is.True);
            Assert.That(endpoints.Any(e => e.RoutePattern.RawText == "/healthz"), Is.True);
            Assert.That(endpoints.Any(e => e.RoutePattern.RawText == "/ready"), Is.True);
        }

        [Test]
        public async Task QueryStartupReturnsHealthyResponseWhenServiceReady()
        {
            var status = new ServerStatus(true, new DateTime(2024, 1, 2, 3, 4, 5, DateTimeKind.Utc));
            var module = this.CreateModule(status, out var tokenGenerator, out var cometHasStartedService);
            tokenGenerator.Setup(t => t.GenerateRandomToken()).Returns("token");

            var context = new DefaultHttpContext();
            context.Request.Method = HttpMethods.Get;
            context.Request.Path = "/health/startup";
            context.Response.Body = new MemoryStream();

            var result = module.QueryStartp(context.Request, context.Response);
            await result.ExecuteAsync(context);

            context.Response.Body.Seek(0, SeekOrigin.Begin);
            using var reader = new StreamReader(context.Response.Body);
            var body = await reader.ReadToEndAsync();

            Assert.That(context.Response.StatusCode, Is.EqualTo((int)HttpStatusCode.OK));
            Assert.That(body, Is.EqualTo($"Started since {status.DateTime.ToString(CultureInfo.CurrentCulture)}"));

            tokenGenerator.Verify(t => t.GenerateRandomToken(), Times.Once);
            cometHasStartedService.Verify(s => s.GetHasStartedAndIsReady(), Times.AtLeast(2));
        }

        [Test]
        public async Task QueryStartupReturnsServiceUnavailableWhenStartupInProgress()
        {
            var status = new ServerStatus(false, new DateTime(2024, 1, 2, 3, 4, 5, DateTimeKind.Utc));
            var module = this.CreateModule(status, out var tokenGenerator, out var cometHasStartedService);
            tokenGenerator.Setup(t => t.GenerateRandomToken()).Returns("token");

            var context = new DefaultHttpContext();
            context.Request.Method = HttpMethods.Get;
            context.Request.Path = "/health/startup";
            context.Response.Body = new MemoryStream();

            var result = module.QueryStartp(context.Request, context.Response);
            await result.ExecuteAsync(context);

            context.Response.Body.Seek(0, SeekOrigin.Begin);
            using var reader = new StreamReader(context.Response.Body);
            var body = await reader.ReadToEndAsync();

            Assert.That(context.Response.StatusCode, Is.EqualTo((int)HttpStatusCode.ServiceUnavailable));
            Assert.That(body, Is.EqualTo("Startup in Progress"));

            tokenGenerator.Verify(t => t.GenerateRandomToken(), Times.Once);
            cometHasStartedService.Verify(s => s.GetHasStartedAndIsReady(), Times.AtLeast(2));
        }

        [Test]
        public async Task QueryReadinessReturnsHealthyWhenDatabaseCallSucceeds()
        {
            var module = this.CreateModule(new ServerStatus(true, DateTime.UtcNow), out var tokenGenerator, out var cometHasStartedService);
            tokenGenerator.Setup(t => t.GenerateRandomToken()).Returns("token");

            var transactionManager = new Mock<ICdp4TransactionManager>();
            transactionManager.Setup(m => m.SetupTransactionAsync(null)).ReturnsAsync((NpgsqlTransaction)null);
            transactionManager.Setup(m => m.TryDisposeTransaction(It.IsAny<NpgsqlTransaction>())).Returns(Task.CompletedTask);

            var siteDirectoryDao = new Mock<ISiteDirectoryDao>();
            siteDirectoryDao.Setup(d => d.ReadAsync(It.IsAny<NpgsqlTransaction>(), It.IsAny<string>(), It.IsAny<IEnumerable<Guid>>(), It.IsAny<bool>(), It.IsAny<DateTime?>()))
                .ReturnsAsync(Array.Empty<SiteDirectory>());

            var context = new DefaultHttpContext();
            context.Request.Method = HttpMethods.Get;
            context.Request.Path = "/ready";
            context.Response.Body = new MemoryStream();

            var result = await module.QueryReadinessAsync(context.Request, context.Response, transactionManager.Object, siteDirectoryDao.Object);
            await result.ExecuteAsync(context);

            context.Response.Body.Seek(0, SeekOrigin.Begin);
            using var reader = new StreamReader(context.Response.Body);
            var body = await reader.ReadToEndAsync();

            Assert.That(context.Response.StatusCode, Is.EqualTo((int)HttpStatusCode.OK));
            Assert.That(body, Is.EqualTo("Healthy"));

            transactionManager.Verify(m => m.SetCachedDtoReadEnabled(false), Times.Once);
            transactionManager.Verify(m => m.TryDisposeTransaction(It.IsAny<NpgsqlTransaction>()), Times.Once);
            siteDirectoryDao.Verify(d => d.ReadAsync(It.IsAny<NpgsqlTransaction>(), It.IsAny<string>(), It.IsAny<IEnumerable<Guid>>(), It.IsAny<bool>(), It.IsAny<DateTime?>()), Times.Once);
        }

        [Test]
        public async Task QueryReadinessReturnsUnhealthyWhenDatabaseThrows()
        {
            var module = this.CreateModule(new ServerStatus(true, DateTime.UtcNow), out var tokenGenerator, out _);
            tokenGenerator.Setup(t => t.GenerateRandomToken()).Returns("token");

            var transactionManager = new Mock<ICdp4TransactionManager>();
            transactionManager.Setup(m => m.SetupTransactionAsync(null)).ReturnsAsync((NpgsqlTransaction)null);
            transactionManager.Setup(m => m.TryDisposeTransaction(It.IsAny<NpgsqlTransaction>())).Returns(Task.CompletedTask);

            var exception = CreatePostgresException("database error");

            var siteDirectoryDao = new Mock<ISiteDirectoryDao>();
            siteDirectoryDao.Setup(d => d.ReadAsync(It.IsAny<NpgsqlTransaction>(), It.IsAny<string>(), It.IsAny<IEnumerable<Guid>>(), It.IsAny<bool>(), It.IsAny<DateTime?>()))
                .ThrowsAsync(exception);

            var context = new DefaultHttpContext();
            context.Request.Method = HttpMethods.Get;
            context.Request.Path = "/ready";
            context.Response.Body = new MemoryStream();

            var result = await module.QueryReadinessAsync(context.Request, context.Response, transactionManager.Object, siteDirectoryDao.Object);
            await result.ExecuteAsync(context);

            context.Response.Body.Seek(0, SeekOrigin.Begin);
            using var reader = new StreamReader(context.Response.Body);
            var body = await reader.ReadToEndAsync();

            Assert.That(context.Response.StatusCode, Is.EqualTo((int)HttpStatusCode.ServiceUnavailable));
            Assert.That(body, Is.EqualTo("Unhealthy"));

            transactionManager.Verify(m => m.TryDisposeTransaction(It.IsAny<NpgsqlTransaction>()), Times.Once);
        }

        [Test]
        public async Task QueryHealthReturnsOkResponse()
        {
            var context = new DefaultHttpContext();
            context.Response.Body = new MemoryStream();

            var result = HealthModule.QueryHealth(context.Response);
            await result.ExecuteAsync(context);

            context.Response.Body.Seek(0, SeekOrigin.Begin);
            using var reader = new StreamReader(context.Response.Body);
            var body = await reader.ReadToEndAsync();

            Assert.That(context.Response.StatusCode, Is.EqualTo((int)HttpStatusCode.OK));
            Assert.That(body, Is.EqualTo("Healthy"));
        }

        private HealthModule CreateModule(ServerStatus status, out Mock<ITokenGeneratorService> tokenGeneratorService, out Mock<ICometHasStartedService> cometHasStartedService)
        {
            var logger = new Mock<ILogger<HealthModule>>();
            var appConfigService = new Mock<IAppConfigService>();
            appConfigService.SetupGet(s => s.AppConfig).Returns(new AppConfig());

            tokenGeneratorService = new Mock<ITokenGeneratorService>();
            cometHasStartedService = new Mock<ICometHasStartedService>();
            cometHasStartedService.Setup(s => s.GetHasStartedAndIsReady()).Returns(status);

            return new HealthModule(logger.Object, appConfigService.Object, tokenGeneratorService.Object, cometHasStartedService.Object);
        }

        private static PostgresException CreatePostgresException(string message)
        {
            var exception = (PostgresException)FormatterServices.GetUninitializedObject(typeof(PostgresException));
            typeof(Exception).GetField("_message", BindingFlags.Instance | BindingFlags.NonPublic)?.SetValue(exception, message);
            return exception;
        }
    }
}
